Parameters:
  InstanceType: 
    Description: Ec2 instance
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: t2.micro instance are allowed.
Resources: 
  PublicSubnet:     #public subnet for us-east(jumbox)
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: 
        Fn::ImportValue: CVPC
      MapPublicIpOnLaunch: true
     # AvailabiltyZone: "us-east-1"
  
  PrivateSubnet:      #private subnet for us-east-1
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: 
        Fn::ImportValue: CVPC
      #AvailablityZone: "us-east-1"

 # PublicSubnet1:      #public subnet for us-east-2    
   # Type: 'AWS::EC2::Subnet'
    #Properties:
     # CidrBlock: 10.0.3.0/24
      #1: 
        Fn::ImportValue: CVPC
     # AvailablityZone: "us-east-1" 

  #PrivateSubnet1:      #private subnet for us-east-2    
   # Type: 'AWS::EC2::Subnet'
    #Properties:
     # CidrBlock: 10.0.4.0/24
      #1: 
        Fn::ImportValue: CVPC
      #AvailablityZone: "us-east-1"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Fn::ImportValue: CVPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: !Ref AGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
        Fn::ImportValue: GId

  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable    
  Psecuritygroup:  #security group for public subnet jumbbox instance        
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: CVPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  Prsecuritygroup:   #security group for ec2 instances       
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: CVPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref TCPLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: TCPLocation
          
  Jumbbox:            #jumbbox instance
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-09d3b3274b6c5d4aa
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: jumbbox
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0" 
        SubnetId: !Ref PublicSubnet
        GroupSet: 
          - !Ref Psecuritygroup

  PublicInstance:       #Ec2instance for Public-Subnet  
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-09d3b3274b6c5d4aa
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref Prsecuritygroup
      Tags:
        - Key: Name
          Value: EC2-public        

  PrivateInstance:      #Ec2 instance for Private-Subnet
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-09d3b3274b6c5d4aa
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref Prsecuritygroup
      Tags:
        - Key: Name
          Value: EC2-private

                          
  OutboundRuleApp:       #Outbound rule for private ec2. To connect between app and jumpbox
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt Psecuritygroup.GroupId
      GroupId: !GetAtt Precuritygroup.GroupId
                          
  InboundRuleApp:        #Inbound rule for private ec2. To connect between app and jumpbox
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt Psecurity.GroupId
      GroupId: !GetAtt Prsecuritygroup.GroupId
                        
  OutboundRuleJump:       #Outbound rule for Jump Box Server. To connect between app and jumpbox
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !GetAtt Precuritygroup.GroupId
      GroupId: !GetAtt Psecuritygroup.GroupId
                         
  InboundRuleJump:       #Inbound rule for Jump Box Server. To connect between app and jumpbox
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt Precuritygroup.GroupId
      GroupId: !GetAtt Psecuritygroup.GroupId