Parameters:
  InstanceType: 
    Description: Ec2 instance
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: t2.micro instance are allowed.

  SSHLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  TCPLocation:
    Description: ' The IP address range that can be used to access the web server using TCP from JumpBox.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [development, production]
    ConstraintDescription: must be development or production

  Dynamicamiid:    #to dynamically assign ami id
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Mappings:     # need to update ami
  EnvironmentToInstanceType:
    development:
      InstanceType: t2.micro
    production:
      InstanceType: t2.small
Resources:
  Publicsecuritygroup:  #security group for public subnet jumbbox instance        
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: VPCId
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.2.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.4.0/24

  Privatesecuritygroup:   #security group for ec2 instances       
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: VPCId
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref TCPLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref TCPLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref TCPLocation

  Privatesecuritygroup1:   #security group for ec2 instances       
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: VPCId
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref TCPLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref TCPLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref TCPLocation
 
  Publicsecuritygroup1:   #security group for ec2 instances       
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Fn::ImportValue: VPCId
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref TCPLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref TCPLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref TCPLocation
          
  Jumbbox:            #jumbbox instance
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref Dynamicamiid
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: jumbbox
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0" 
        SubnetId:
          Fn::ImportValue: PublicSubnet0 
        GroupSet: 
          - !Ref Publicsecuritygroup

  PublicInstance:       #Ec2instance for Public-Subnet  
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref Dynamicamiid
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', InstanceType]
      SubnetId: !ImportValue PublicSubnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Publicsecuritygroup1
      Tags:
        - Key: Name
          Value: EC2-public        

  PrivateInstance:      #Ec2 instance for Private-Subnet
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref Dynamicamiid
      KeyName: !Ref KeyName
      SubnetId: !ImportValue PrivateSubnet0
      SecurityGroupIds:
        - !Ref Privatesecuritygroup
      Tags:
        - Key: Name
          Value: EC2-private

  PrivateInstance1:      #Ec2 instance for Private-Subnet1
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref Dynamicamiid
      SubnetId: !ImportValue PrivateSubnet1
      SecurityGroupIds:
        - !Ref Privatesecuritygroup1
      Tags:
        - Key: Name
          Value: EC2-private1
